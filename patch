diff --git a/src/AppMap.tsx b/src/AppMap.tsx
index fb140e2..9f92e43 100644
--- a/src/AppMap.tsx
+++ b/src/AppMap.tsx
@@ -1,133 +1,135 @@
-import React, {ChangeEvent, useEffect, useState} from "react";
-import {usePosition} from 'use-position';
-import s from './App.module.css'
-import {GeolocationControl, Map, Placemark, YMaps} from "react-yandex-maps";
-import {useDispatch, useSelector} from "react-redux";
-import {centerPositionAC, FeaturesType, getPlacemarksTC, myLocationAC} from "./store/MapReducer";
-import {StateType} from "./store/store";
+import React, { ChangeEvent, useEffect, useState } from "react";
+import { usePosition } from "use-position";
+import s from "./App.module.css";
+import { GeolocationControl, Map, Placemark, YMaps } from "react-yandex-maps";
+import { useDispatch, useSelector } from "react-redux";
+import {
+  centerPositionAC,
+  FeaturesType,
+  getPlacemarksTC,
+  myLocationAC
+} from "./store/MapReducer";
+import { StateType } from "./store/store";
 import SearchBarInMap from "./components/SearchBarInMap";
 import { points } from "./App";
 
-
 const MapApp = () => {
-
-    const [hideResults, setHideResults] = useState(false)
-    const dispatch = useDispatch()
-    const feature = useSelector<StateType, Array<FeaturesType>>(state => state.map.feature)
-    const myLocation = useSelector<StateType, Array<number>>(state => state.map.myLocation)
-    const center = useSelector<StateType, Array<number>>(state => state.map.center)
-    const zoom = useSelector<StateType, number>(state => state.map.zoom)
-    const search = useSelector<StateType, string>(state => state.map.search)
-
-    const [searchValue, setSearchValue] = useState('')
-
-    const watch = true;
-    const {
-        latitude,
-        longitude,
-    } = usePosition(watch);
-
-    const mapState = {
-        width: 3538,
-        center: center,
-        zoom: zoom,
-        controls: []
-    }
-
-    useEffect(() => {
-        dispatch(getPlacemarksTC(search))
-    }, [dispatch, search])
-    const handleMyLocation = () => {
-        const location = [latitude!, longitude!]
-        dispatch(myLocationAC(location, 14))
-        dispatch(centerPositionAC(location))
-    };
-
-    const onSubmitSearch = () => {
-        dispatch(getPlacemarksTC(searchValue))
-        setHideResults(true)
-    }
-
-    const onChangeSearchValue = (e: ChangeEvent<HTMLInputElement>) => {
-        setSearchValue(e.currentTarget.value)
-    }
-
-
-    return (
-        <div className={s.app}>
-
-            <div className={s.search_container}>
-
-                {/*search component*/}
-                <div className={s.search}>
-                    <input type="text"
-                           value={searchValue}
-                           onChange={onChangeSearchValue}
-                           className={s.search_box}
-                           placeholder="Search"/>
-                    <input value="search"
-                           type="submit"
-                           onClick={onSubmitSearch}
-                           className={s.button}/>
-                    <input value="X"
-                           type="submit"
-                           className={s.button}/>
-
-
-                    {hideResults
-                        ? <button onClick={() => setHideResults(false)}>hide</button>
-                        : <button onClick={() => setHideResults(true)}>show</button>}
-                </div>
-
-                {hideResults && <div className={s.results}>
-                    <SearchBarInMap resultArray={feature} />
-                </div>}
-
-            </div>
-
-            <YMaps query={{lang: 'ru_RU', load: 'package.full'}}>
-                <Map width="100%"
-                     height="100vh"
-
-                     state={{zoom: zoom, center: center}}
-                     defaultState={mapState}
-                     modules={["geoObject.addon.editor", "geolocation", "geocode"]}>
-                    {feature.map((c) => {
-                        return <Placemark
-                            geometry={[c.geometry.coordinates[1], c.geometry.coordinates[0]]}
-                            modules={['geoObject.addon.balloon', 'geoObject.addon.hint']}
-                            properties={{
-                                balloonContentHeader: c.properties.CompanyMetaData.name,
-                                balloonContentBody: c.properties.CompanyMetaData.address,
-                                balloonContentFooter: c.properties.CompanyMetaData.url,
-                            }}
-                        />
-                    })}
-                    <Placemark
-                        geometry={[53.917485, 27.604842]}
-                        options={{
-                            preset: "islands#circleDotIcon",
-                            iconColor: '#002222'
-                        }}
-                        properties={{
-                            balloonContentHeader: "It-инкубатор",
-                            balloonContentBody: "Беларусь, Минск,ул. Сурганова, 2",
-                            balloonContentFooter: "http://it-kamasutra.com/",
-                        }}
-                    />
-                    <Placemark
-                        geometry={myLocation}
-
-                        options={{
-                            preset: "islands#circleDotIcon",
-                            iconColor: '#ff0000'
-                        }}
-                    />
-                    <GeolocationControl onClick={handleMyLocation} options={{float: 'right'}}/>
-                </Map>
-            </YMaps>
+  const dispatch = useDispatch();
+  const feature = useSelector<StateType, Array<FeaturesType>>(
+    state => state.map.feature
+  );
+  const myLocation = useSelector<StateType, Array<number>>(
+    state => state.map.myLocation
+  );
+  const center = useSelector<StateType, Array<number>>(
+    state => state.map.center
+  );
+  const zoom = useSelector<StateType, number>(state => state.map.zoom);
+  const search = useSelector<StateType, string>(state => state.map.search);
+
+  const [searchValue, setSearchValue] = useState("");
+
+  const watch = true;
+  const { latitude, longitude } = usePosition(watch);
+
+  const mapState = {
+    width: 3538,
+    center: center,
+    zoom: zoom,
+    controls: []
+  };
+
+  useEffect(
+    () => {
+      dispatch(getPlacemarksTC(searchValue));
+    },
+    [dispatch, searchValue]
+  );
+  const handleMyLocation = () => {
+    const location = [latitude!, longitude!];
+    dispatch(myLocationAC(location, 14));
+    dispatch(centerPositionAC(location));
+  };
+
+  const onChangeSearchValue = (e: ChangeEvent<HTMLInputElement>) => {
+    setSearchValue(e.currentTarget.value);
+  };
+  const filteredFeatures = feature.filter(feature => feature.properties.name?.toLowerCase().includes(searchValue)
+                                                || feature.properties.description?.toLowerCase().includes(searchValue))
+
+  return (
+    <div className={s.app}>
+      <div className={s.search_container}>
+        {/*search component*/}
+        <div className={s.search}>
+          <input
+            type="text"
+            value={searchValue}
+            onChange={onChangeSearchValue}
+            className={s.search_box}
+            placeholder="Search"
+          />
+          <input value="X" type="submit" className={s.button} />
         </div>
-    )
-}
 
-export default MapApp
+        {searchValue.length > 0 && (
+          <div className={s.results}>
+            <SearchBarInMap resultArray={filteredFeatures} />
+          </div>
+        )}
+      </div>
+
+      <YMaps query={{ lang: "ru_RU", load: "package.full" }}>
+        <Map
+          width="100%"
+          height="100vh"
+          state={{ zoom: zoom, center: center }}
+          defaultState={mapState}
+          modules={["geoObject.addon.editor", "geolocation", "geocode"]}
+        >
+          {filteredFeatures.map(c => {
+            return (
+              <Placemark
+                geometry={[
+                  c.geometry.coordinates[1],
+                  c.geometry.coordinates[0]
+                ]}
+                modules={["geoObject.addon.balloon", "geoObject.addon.hint"]}
+                properties={{
+                  balloonContentHeader: c.properties.CompanyMetaData.name,
+                  balloonContentBody: c.properties.CompanyMetaData.address,
+                  balloonContentFooter: c.properties.CompanyMetaData.url
+                }}
+              />
+            );
+          })}
+          <Placemark
+            geometry={[53.917485, 27.604842]}
+            options={{
+              preset: "islands#circleDotIcon",
+              iconColor: "#002222"
+            }}
+            properties={{
+              balloonContentHeader: "It-инкубатор",
+              balloonContentBody: "Беларусь, Минск,ул. Сурганова, 2",
+              balloonContentFooter: "http://it-kamasutra.com/"
+            }}
+          />
+          <Placemark
+            geometry={myLocation}
+            options={{
+              preset: "islands#circleDotIcon",
+              iconColor: "#ff0000"
+            }}
+          />
+          <GeolocationControl
+            onClick={handleMyLocation}
+            options={{ float: "right" }}
+          />
+        </Map>
+      </YMaps>
+    </div>
+  );
+};
+
+export default MapApp;
diff --git a/src/components/SearchBarInMap.tsx b/src/components/SearchBarInMap.tsx
index b00455d..7018891 100644
--- a/src/components/SearchBarInMap.tsx
+++ b/src/components/SearchBarInMap.tsx
@@ -1,83 +1,85 @@
-import React, {useEffect, useState} from 'react';
-import s from './SearchBar.module.css'
-import SearchItem from './SearchItem';
-import {Waypoint} from 'react-waypoint';
-import {FeaturesType} from "../store/MapReducer";
+import React, { useEffect, useState } from "react";
+import s from "./SearchBar.module.css";
+import SearchItem from "./SearchItem";
+import { Waypoint } from "react-waypoint";
+import { FeaturesType } from "../store/MapReducer";
 
 // бокавая панель с результатами поиска
 
 type SearchBarPropsType = {
-    resultArray: Array<FeaturesType>
-}
+  resultArray: Array<FeaturesType>;
+};
 
 const SearchBar = (props: SearchBarPropsType) => {
+  const totalItems = props.resultArray.length; //размер всего массива
+  const pageSize = 5; //размер подгружаемого массива
 
-    const totalItems = props.resultArray.length; //размер всего массива
-    const pageSize = 5; //размер подгружаемого массива
+  const [page, setPage] = useState<number>(1); // номер порции подгружаемых айтемов
+  const [items, setItems] = useState<Array<FeaturesType>>([]); // отображаемые айтемы
+  const [hasNextPage, setHasNextPage] = useState(true); // если есть следующие айтемы для отображения - true
+  const [startIndex, setStartIndex] = useState<number>(0); // стартовый индекс, откуда начинает вырезаться массив
+  const [error, setError] = useState<string>(""); // если массив пустой, вернет ошибку
 
-    const [page, setPage] = useState<number>(1); // номер порции подгружаемых айтемов
-    const [items, setItems] = useState<Array<FeaturesType>>([]); // отображаемые айтемы
-    const [hasNextPage, setHasNextPage] = useState(true); // если есть следующие айтемы для отображения - true
-    const [startIndex, setStartIndex] = useState<number>(0) // стартовый индекс, откуда начинает вырезаться массив
-    const [error, setError] = useState<string>("") // если массив пустой, вернет ошибку
+  // вырезает из массива количество страниц, равное pageSize
+  const cutArr = (
+    arr: Array<FeaturesType>,
+    startIndex: number
+  ): Array<FeaturesType> => {
+    let cuttedArr = [...arr].splice(startIndex, pageSize);
+    return cuttedArr;
+  };
 
-    // вырезает из массива количество страниц, равное pageSize
-    const cutArr = (arr: Array<FeaturesType>, startIndex: number,): Array<FeaturesType> => {
-        let cuttedArr = [...arr].splice(startIndex, pageSize);
-        return cuttedArr;
-    }
-
-    useEffect(() => {
-        getItems();
-    }, []);
-
-    const getItems = () => {
-        if (!hasNextPage) return;
+  useEffect(() => {
+    getItems();
+  }, []);
 
-        let nextItems = cutArr(props.resultArray, startIndex);
-        if (nextItems) {
-            if (totalItems === items.length + nextItems.length) {
-                setHasNextPage(false)
-            }
-            setItems(items.concat(nextItems));
-            setPage(page + 1);
-            setStartIndex(startIndex + pageSize);
-        }
-        if (items.length === 0) {
-            setError("Ничего не нашел :(")
-        }
-        ;
+  const getItems = () => {
+    if (!hasNextPage) return;
 
+    let nextItems = cutArr(props.resultArray, startIndex);
+    if (nextItems) {
+      if (totalItems === items.length + nextItems.length) {
+        setHasNextPage(false);
+      }
+      setItems(items.concat(nextItems));
+      setPage(page + 1);
+      setStartIndex(startIndex + pageSize);
     }
+    if (items.length === 0) {
+      setError("Ничего не нашел :(");
+    }
+  };
 
-    const loadMoreItems = () => {
-        if (page > 1) {
-            getItems();
-        }
+  const loadMoreItems = () => {
+    if (page > 1) {
+      getItems();
     }
+  };
 
-    if (items.length !== 0) {
-        return (
-            <div>
-                <div className={s.search_bar}>
-                    {items.map((item, index) =>
-                        <SearchItem key={index}
-                                    number={index + 1}
-                                    address={item.properties.CompanyMetaData.address}
-                                    url={item.properties.CompanyMetaData.url}
-                                    name={item.properties.CompanyMetaData.name}/>)}
+  if (items.length !== 0) {
+    return (
+      <div>
+        <div className={s.search_bar}>
+          {items.map((item, index) => (
+            <SearchItem
+              key={index}
+              number={index + 1}
+              address={item.properties.CompanyMetaData.address}
+              url={item.properties.CompanyMetaData.url}
+              name={item.properties.CompanyMetaData.name}
+            />
+          ))}
 
-                    {hasNextPage && (
-                        <Waypoint onEnter={loadMoreItems}>
-                            <div>Loading...</div>
-                        </Waypoint>
-                    )
-                    }
-                </div>
-            </div>
-        )
-    } else {
-        return <h2>{error}</h2>
-    }
-}
-export default SearchBar;
\ No newline at end of file
+          {hasNextPage && (
+            <Waypoint onEnter={loadMoreItems}>
+              <div>Loading...</div>
+            </Waypoint>
+          )}
+        </div>
+      </div>
+    );
+  } else {
+    return <h2>{error}</h2>;
+  }
+};
+export default SearchBar;
diff --git a/src/store/MapReducer.tsx b/src/store/MapReducer.tsx
index 230fbc0..8d892d8 100644
--- a/src/store/MapReducer.tsx
+++ b/src/store/MapReducer.tsx
@@ -1,122 +1,134 @@
-import {MapsAPI} from "../api/yandex-map-api";
-import {Dispatch} from 'redux';
+import { MapsAPI } from "../api/yandex-map-api";
+import { Dispatch } from "redux";
 
-export type GetPlaceMarks = ReturnType<typeof getPlacemarksAC>
-export type SearchType = ReturnType<typeof setSearchValueAC>
-export type MyLocationType = ReturnType<typeof myLocationAC>
-export type CenterPositionType = ReturnType<typeof centerPositionAC>
+export type GetPlaceMarks = ReturnType<typeof getPlacemarksAC>;
+export type SearchType = ReturnType<typeof setSearchValueAC>;
+export type MyLocationType = ReturnType<typeof myLocationAC>;
+export type CenterPositionType = ReturnType<typeof centerPositionAC>;
 
-export type ActionsType = GetPlaceMarks | SearchType | MyLocationType | CenterPositionType
+export type ActionsType =
+  | GetPlaceMarks
+  | SearchType
+  | MyLocationType
+  | CenterPositionType;
 
 export type FeaturesType = {
-    geometry: CoordinatesType
-    properties: PropertiesType
-}
+  geometry: CoordinatesType;
+  properties: PropertiesType;
+};
 
 export type CoordinatesType = {
-    coordinates: Array<number>
-}
+  coordinates: Array<number>;
+};
 
 type PropertiesType = {
-    CompanyMetaData: CompanyMetaDataType
-}
+  CompanyMetaData: CompanyMetaDataType;
+  name: string;
+  description: string;
+};
 
 type CompanyMetaDataType = {
-    name: string
-    address: string
-    url: string
-}
+  name: string;
+  address: string;
+  url: string;
+};
 
 export type InitialStateType = {
-    feature: Array<FeaturesType>
-    myLocation: Array<number>
-    center: Array<number>
-    zoom: number
-    search: string
-}
+  feature: Array<FeaturesType>;
+  myLocation: Array<number>;
+  center: Array<number>;
+  zoom: number;
+  search: string;
+};
 
 let InitialState: InitialStateType = {
-    feature: [
-        {
-            geometry: {
-                coordinates: []
-            },
-            properties: {
-                CompanyMetaData: {
-                    name: '',
-                    address: '',
-                    url: ''
-                }
-            }
-        }
-    ],
-    myLocation: [],
-    center: [32.99054220474171, 3.8141637443059158],
-    zoom: 3,
-    search: ''
-}
+  feature: [
+    {
+      geometry: {
+        coordinates: []
+      },
+      properties: {
+        CompanyMetaData: {
+          name: "",
+          address: "",
+          url: ""
+        },
+        name: "",
+        description: ""
+      }
+    }
+  ],
+  myLocation: [],
+  center: [32.99054220474171, 3.8141637443059158],
+  zoom: 3,
+  search: ""
+};
 
 export const MapReducer = (state = InitialState, action: ActionsType) => {
-    switch (action.type) {
-        case "MAPS/GET_PLACEMARKS": {
-            return {
-                ...state,
-                ...state.feature,
-                feature: action.feature
-            }
-        }
-        case "MAPS/MY_LOCATION":
-            return {
-                ...state,
-                ...state.myLocation,
-                myLocation: action.location,
-                zoom: action.zoom
-            }
-        case "MAPS/CENTER_POSITION":
-            return {
-                ...state,
-                center: action.center
-            }
-        case "MAPS/SEARCH_VALUE":
-            return {
-                ...state,
-                searchValue: action.search
-            }
-
-        default:
-            return state
+  switch (action.type) {
+    case "MAPS/GET_PLACEMARKS": {
+      return {
+        ...state,
+        ...state.feature,
+        feature: action.feature
+      };
     }
-}
+    case "MAPS/MY_LOCATION":
+      return {
+        ...state,
+        ...state.myLocation,
+        myLocation: action.location,
+        zoom: action.zoom
+      };
+    case "MAPS/CENTER_POSITION":
+      return {
+        ...state,
+        center: action.center
+      };
+    case "MAPS/SEARCH_VALUE":
+      return {
+        ...state,
+        searchValue: action.search
+      };
+
+    default:
+      return state;
+  }
+};
 
 export const getPlacemarksAC = (feature: Array<FeaturesType>) => {
-    return {
-        type: 'MAPS/GET_PLACEMARKS', feature
-    } as const
-}
+  return {
+    type: "MAPS/GET_PLACEMARKS",
+    feature
+  } as const;
+};
 
 export const setSearchValueAC = (search: string) => {
-    return {
-        type: 'MAPS/SEARCH_VALUE', search
-    } as const
-}
+  return {
+    type: "MAPS/SEARCH_VALUE",
+    search
+  } as const;
+};
 export const myLocationAC = (location: Array<number>, zoom: number) => {
-    return {
-        type: 'MAPS/MY_LOCATION', location, zoom
-    } as const
-}
+  return {
+    type: "MAPS/MY_LOCATION",
+    location,
+    zoom
+  } as const;
+};
 export const centerPositionAC = (center: Array<number>) => {
-    return {
-        type: 'MAPS/CENTER_POSITION', center
-    } as const
-}
+  return {
+    type: "MAPS/CENTER_POSITION",
+    center
+  } as const;
+};
 
 export const getPlacemarksTC = (search: string) => {
-    return (dispatch: Dispatch) => {
-        debugger
-        MapsAPI.getResult(search).then(res => {
-            dispatch(getPlacemarksAC(res.data.features))
-        }).catch(e => {
-            }
-        )
-    }
-}
\ No newline at end of file
+  return (dispatch: Dispatch) => {
+    MapsAPI.getResult(search)
+      .then(res => {
+        dispatch(getPlacemarksAC(res.data.features));
+      })
+      .catch(e => {});
+  };
+};
